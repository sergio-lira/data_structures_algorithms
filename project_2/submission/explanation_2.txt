### Explanation

Algorithm:

* For each element in the current path
* Check if the element is a file
* if is a file check if the element ends with the suffix
* if true append the current path to the list of results
* else the current path is a dir
* Enumerate all element in the dir
* recurse for each element in the path

For this problem, I had the choice of generating an iterative or recursive solution. I think that the recursive solution is concise and elegant.

Efficiency:

Time - Overall O(n * s)
* O(n) were n is the total number of elements, dir + files.
* For each file we perform string search of the suffix, this operation is O(s) were the s is the length of the string.
* If a dir is composed of (n) strings and all string are of length (s) then it would take O(n * s) to search all elements.

Space - Overall O(n)
* Each recursive call on a dir uses space O(n), and we are keeping a list of matched elements O(n) if all elements match.
